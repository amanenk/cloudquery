// Code generated by codegen; DO NOT EDIT.

package {{.Service}}


import (
{{if not .SkipFetch}}
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/digitalocean/godo"
{{end -}}

    "github.com/cloudquery/plugin-sdk/schema"

  {{range .Imports}}
  "{{.}}"
  {{end}}
)



func {{.SubServiceName | ToCamel}}() *schema.Table {
    return &schema.Table{{template "table.go.tpl" .Table}}
}

{{$func := .SubService | ToCamel}}
{{$func =  printf "%v%v" "List" $func}}
{{if ne .FunctionName ""}}
{{$func = .FunctionName}}
{{end}}

{{if not .SkipFetch}}
func fetch{{.SubServiceName | ToCamel}}(ctx context.Context, meta schema.ClientMeta, {{if eq .ParentStructName ""}}_{{else}}parent{{end}} *schema.Resource, res chan<- interface{}) error {
	{{- if ne .ParentStructName ""}}p := parent.Item.({{if .IsParentPointer}}*{{end}}godo.{{.ParentStructName}}){{- end}}
	svc := meta.(*client.Client)

	opt := &godo.ListOptions{
    	PerPage: client.MaxItemsPerPage,
    }

    done := false
    listFunc := func() error {
        data, resp, err := svc.Services.{{.Service | ToCamel}}.{{$func}}(ctx{{if ne .ParentStructName ""}}{{.Args}}{{end}}, opt)
        if err != nil {
            return err
        }
        // pass the current page's data to our result channel
        res <- data{{.ResponsePath}}
        // if we are at the last page, break out the for loop
        if resp.Links == nil || resp.Links.IsLastPage() {
            done = true
            return nil
        }
        page, err := resp.Links.CurrentPage()
        if err != nil {
            return err
        }
        // set the page we want for the next request
        opt.Page = page + 1
        return nil
    }

    for !done {
        err := client.ThrottleWrapper(ctx, svc, listFunc)
        if err != nil {
            return err
        }
    }
    return nil
}
{{end}}