// Code generated by codegen; DO NOT EDIT.

package droplets

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/digitalocean/godo"
	"github.com/pkg/errors"

	"github.com/cloudquery/plugin-sdk/schema"
)

func Droplets() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_droplets",
		Resolver: fetchDroplets,
		Columns: []schema.Column{
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "memory",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Memory"),
			},
			{
				Name:     "vcpus",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Vcpus"),
			},
			{
				Name:     "disk",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Disk"),
			},
			{
				Name:     "region",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Region"),
			},
			{
				Name:     "image",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Image"),
			},
			{
				Name:     "size",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Size"),
			},
			{
				Name:     "size_slug",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SizeSlug"),
			},
			{
				Name:     "backup_i_ds",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("BackupIDs"),
			},
			{
				Name:     "next_backup_window",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NextBackupWindow"),
			},
			{
				Name:     "snapshot_i_ds",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("SnapshotIDs"),
			},
			{
				Name:     "features",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Features"),
			},
			{
				Name:     "locked",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Locked"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "networks",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Networks"),
			},
			{
				Name:     "created",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "kernel",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Kernel"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "volume_i_ds",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("VolumeIDs"),
			},
			{
				Name:     "vpcuuid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VPCUUID"),
			},
		},

		Relations: []*schema.Table{
			Neighbors(),
		},
	}
}

func fetchDroplets(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {

	svc := meta.(*client.Client)

	opt := &godo.ListOptions{
		PerPage: client.MaxItemsPerPage,
	}

	done := false
	listFunc := func() error {
		data, resp, err := svc.Services.Droplets.List(ctx, opt)
		if err != nil {
			return errors.WithStack(err)
		}
		// pass the current page's data to our result channel
		res <- data
		// if we are at the last page, break out the for loop
		if resp.Links == nil || resp.Links.IsLastPage() {
			done = true
			return nil
		}
		page, err := resp.Links.CurrentPage()
		if err != nil {
			return errors.WithStack(err)
		}
		// set the page we want for the next request
		opt.Page = page + 1
		return nil
	}

	for !done {
		err := client.ThrottleWrapper(ctx, svc, listFunc)
		if err != nil {
			return errors.WithStack(err)
		}
	}
	return nil
}
