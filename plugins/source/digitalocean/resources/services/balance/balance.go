// Code generated by codegen; DO NOT EDIT.

package balance

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Balance() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_balance",
		Resolver: fetchBalance,
		Columns: []schema.Column{
			{
				Name:     "month_to_date_balance",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MonthToDateBalance"),
			},
			{
				Name:     "account_balance",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AccountBalance"),
			},
			{
				Name:     "month_to_date_usage",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MonthToDateUsage"),
			},
			{
				Name:     "generated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("GeneratedAt"),
			},
		},
	}
}

func fetchBalance(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {

	svc := meta.(*client.Client)
	getFunc := func() error {
		response, _, err := svc.Services.Balance.Get(ctx)
		if err != nil {
			return err
		}
		res <- response
		return nil
	}

	err := client.ThrottleWrapper(ctx, svc, getFunc)
	if err != nil {
		return err
	}
	return nil
}
