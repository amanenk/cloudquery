// Code generated by codegen; DO NOT EDIT.

package databases

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/pkg/errors"

	"github.com/digitalocean/godo"
)

func FirewallRules() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_databases_firewall_rules",
		Resolver: fetchFirewallRules,
		Columns: []schema.Column{
			{
				Name:     "uuid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UUID"),
			},
			{
				Name:     "cluster_uuid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClusterUUID"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "value",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Value"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
		},
	}
}

func fetchFirewallRules(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	p := parent.Item.(godo.Database)
	svc := meta.(*client.Client)
	getFunc := func() error {
		response, _, err := svc.Services.Databases.GetFirewallRules(ctx, p.ID)
		if err != nil {
			return errors.WithStack(err)
		}
		res <- response
		return nil
	}

	err := client.ThrottleWrapper(ctx, svc, getFunc)
	if err != nil {
		return errors.WithStack(err)
	}
	return nil
}
