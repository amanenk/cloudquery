// Code generated by codegen; DO NOT EDIT.

package databases

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/digitalocean/godo"
	"github.com/pkg/errors"

	"github.com/cloudquery/plugin-sdk/schema"
)

func Replicas() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_databases_replicas",
		Resolver: fetchReplicas,
		Columns: []schema.Column{
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "connection",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Connection"),
			},
			{
				Name:     "private_connection",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PrivateConnection"),
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Region"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "private_network_uuid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PrivateNetworkUUID"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Tags"),
			},
		},
	}
}

func fetchReplicas(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	p := parent.Item.(godo.Database)
	svc := meta.(*client.Client)

	opt := &godo.ListOptions{
		PerPage: client.MaxItemsPerPage,
	}

	done := false
	for !done {
		listFunc := func() error {
			data, resp, err := svc.Services.Databases.ListReplicas(ctx, p.ID, opt)
			if err != nil {
				return errors.WithStack(err)
			}
			// pass the current page's data to our result channel
			res <- data
			// if we are at the last page, break out the for loop
			if resp.Links == nil || resp.Links.IsLastPage() {
				done = true
				return nil
			}
			page, err := resp.Links.CurrentPage()
			if err != nil {
				return errors.WithStack(err)
			}
			// set the page we want for the next request
			opt.Page = page + 1
			return nil
		}

		err := client.ThrottleWrapper(ctx, svc, listFunc)
		if err != nil {
			return errors.WithStack(err)
		}
	}
	return nil
}
