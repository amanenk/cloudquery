// Code generated by codegen; DO NOT EDIT.

package domains

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/digitalocean/godo"
)

func Records() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_domains_records",
		Resolver: fetchRecords,
		Columns: []schema.Column{
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "data",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Data"),
			},
			{
				Name:     "priority",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Priority"),
			},
			{
				Name:     "port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Port"),
			},
			{
				Name:     "ttl",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TTL"),
			},
			{
				Name:     "weight",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Weight"),
			},
			{
				Name:     "flags",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Flags"),
			},
			{
				Name:     "tag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Tag"),
			},
		},
	}
}

func fetchRecords(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	p := parent.Item.(godo.Domain)
	svc := meta.(*client.Client)

	opt := &godo.ListOptions{
		PerPage: client.MaxItemsPerPage,
	}

	done := false
	listFunc := func() error {
		data, resp, err := svc.Services.Domains.Records(ctx, p.Name, opt)
		if err != nil {
			return err
		}
		// pass the current page's data to our result channel
		res <- data
		// if we are at the last page, break out the for loop
		if resp.Links == nil || resp.Links.IsLastPage() {
			done = true
			return nil
		}
		page, err := resp.Links.CurrentPage()
		if err != nil {
			return err
		}
		// set the page we want for the next request
		opt.Page = page + 1
		return nil
	}

	for !done {
		err := client.ThrottleWrapper(ctx, svc, listFunc)
		if err != nil {
			return err
		}
	}
	return nil
}
