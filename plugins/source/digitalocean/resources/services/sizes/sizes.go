// Code generated by codegen; DO NOT EDIT.

package sizes

import (
	"context"

	"github.com/cloudquery/cloudquery/plugins/source/digitalocean/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/digitalocean/godo"
)

func Sizes() *schema.Table {
	return &schema.Table{
		Name:     "digitalocean_sizes",
		Resolver: fetchSizes,
		Columns: []schema.Column{
			{
				Name:     "slug",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Slug"),
			},
			{
				Name:     "memory",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Memory"),
			},
			{
				Name:     "vcpus",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Vcpus"),
			},
			{
				Name:     "disk",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Disk"),
			},
			{
				Name:     "price_monthly",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("PriceMonthly"),
			},
			{
				Name:     "price_hourly",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("PriceHourly"),
			},
			{
				Name:     "regions",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Regions"),
			},
			{
				Name:     "available",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Available"),
			},
			{
				Name:     "transfer",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Transfer"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
		},
	}
}

func fetchSizes(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {

	svc := meta.(*client.Client)

	opt := &godo.ListOptions{
		PerPage: client.MaxItemsPerPage,
	}

	done := false
	listFunc := func() error {
		data, resp, err := svc.Services.Sizes.List(ctx, opt)
		if err != nil {
			return err
		}
		// pass the current page's data to our result channel
		res <- data
		// if we are at the last page, break out the for loop
		if resp.Links == nil || resp.Links.IsLastPage() {
			done = true
			return nil
		}
		page, err := resp.Links.CurrentPage()
		if err != nil {
			return err
		}
		// set the page we want for the next request
		opt.Page = page + 1
		return nil
	}

	for !done {
		err := client.ThrottleWrapper(ctx, svc, listFunc)
		if err != nil {
			return err
		}
	}
	return nil
}
